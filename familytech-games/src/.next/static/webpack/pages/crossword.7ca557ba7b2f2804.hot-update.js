"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/crossword",{

/***/ "./components/crossword/board.js":
/*!***************************************!*\
  !*** ./components/crossword/board.js ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var C_Users_cjrja_IS_562_Project_Management_familycrossword_2_11_FamilyCrossword_familytech_games_src_node_modules_next_dist_compiled_regenerator_runtime_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/next/dist/compiled/regenerator-runtime/runtime.js */ \"./node_modules/next/dist/compiled/regenerator-runtime/runtime.js\");\n/* harmony import */ var C_Users_cjrja_IS_562_Project_Management_familycrossword_2_11_FamilyCrossword_familytech_games_src_node_modules_next_dist_compiled_regenerator_runtime_runtime_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(C_Users_cjrja_IS_562_Project_Management_familycrossword_2_11_FamilyCrossword_familytech_games_src_node_modules_next_dist_compiled_regenerator_runtime_runtime_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _square__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./square */ \"./components/crossword/square.js\");\n/* harmony import */ var _styles_crossword_module_css__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/styles/crossword.module.css */ \"./styles/crossword.module.css\");\n/* harmony import */ var _styles_crossword_module_css__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_styles_crossword_module_css__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _clue_list__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./clue_list */ \"./components/crossword/clue_list.js\");\n/* harmony import */ var _mui_material__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @mui/material */ \"./node_modules/@mui/material/index.js\");\n/* harmony import */ var _contexts_UserContext__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/contexts/UserContext */ \"./contexts/UserContext.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_6__);\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\nfunction _asyncToGenerator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\nfunction _iterableToArrayLimit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s1, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s1 = _i.next()).done); _n = true){\n            _arr.push(_s1.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\n\n\n\n\n\n\n\n\nvar _s = $RefreshSig$();\nvar START_SQUARES = [];\nfunction Board() {\n    var handleSquareInput = // Handles what happens when a letter is changed on the board\n    function handleSquareInput(letter, row, col, inputLocation) {\n        var newBoard = board1;\n        newBoard[row].CURRENT_ROW[col].CHARACTER = letter;\n        setBoard(newBoard);\n        setPuzzleIsCorrect(checkIfFinished());\n        if (inputLocation.current[row * DIMENSIONS + col].value == \"\") {\n            if (inputLocation.current[row * DIMENSIONS + col - 1].value != \"\") {\n                inputLocation.current[row * DIMENSIONS + col - 1].focus();\n            } else {\n                inputLocation.current[row * DIMENSIONS + col - DIMENSIONS].focus();\n            }\n        } else if (inputLocation.current[row * DIMENSIONS + col - 1].value != \"\") {\n            if (inputLocation.current[row * DIMENSIONS + col + 1].value != \"\") {\n                inputLocation.current[row * DIMENSIONS + col + 2].focus();\n            } else {\n                inputLocation.current[row * DIMENSIONS + col + 1].focus();\n            }\n        } else if (inputLocation.current[row * DIMENSIONS + col - DIMENSIONS].value != \"\") {\n            if (inputLocation.current[row * DIMENSIONS + col + DIMENSIONS].value != \"\") {\n                inputLocation.current[row * DIMENSIONS + col + DIMENSIONS * 2].focus();\n            } else {\n                inputLocation.current[row * DIMENSIONS + col + DIMENSIONS].focus();\n            }\n        } else {\n            if (inputLocation.current[row * DIMENSIONS + col + DIMENSIONS].value != \"\") {\n                inputLocation.current[row * DIMENSIONS + col + DIMENSIONS * 2].focus();\n            } else if (inputLocation.current[row * DIMENSIONS + col + 1].value != \"\") {\n                inputLocation.current[row * DIMENSIONS + col + 2].focus();\n            } else {\n                inputLocation.current[row * DIMENSIONS + col + DIMENSIONS].focus();\n                inputLocation.current[row * DIMENSIONS + col + 1].focus();\n            }\n        }\n    };\n    var handleKeyDown = // Implements navigating the board with arrow keys and backspace on empty square\n    function handleKeyDown(event, row, col, inputLocation) {\n        if (event.keyCode === 37) {\n            var movedLocation = inputLocation.current[row * DIMENSIONS + col - 1].focus();\n            if (movedLocation != null) {\n                movedLocation.focus();\n                movedLocation.setSelectionRange(1, 1);\n            }\n        } else if (event.keyCode === 38) {\n            var movedLocation1 = inputLocation.current[row * DIMENSIONS + col - DIMENSIONS];\n            if (movedLocation1 != null) {\n                movedLocation1.focus();\n                movedLocation1.setSelectionRange(1, 1);\n            }\n        } else if (event.keyCode === 39) {\n            inputLocation.current[row * DIMENSIONS + col + 1].focus();\n        } else if (event.keyCode === 40) {\n            inputLocation.current[row * DIMENSIONS + col + DIMENSIONS].focus();\n        }\n    };\n    var insertAllWords = // Inserts all of the other words into the board except the first word\n    function insertAllWords(board, remainingWords, addedWords, START_SQUARES1, NOT_ADDED) {\n        var finished = false;\n        var attemptedInsertions = 0;\n        while(!finished){\n            for(var i = 0; i < remainingWords.length; i++){\n                attemptedInsertions++;\n                var wordInserted = checkAndInsertWord(remainingWords[i].ANSWER, board, remainingWords, addedWords, START_SQUARES1, remainingWords[i].ASCENDENCY_NUM);\n                if (wordInserted == true) {\n                    break;\n                }\n            }\n            if (remainingWords.length < 1 || attemptedInsertions > 100) {\n                finished = true;\n            }\n            if (finished) {\n                if (remainingWords.length > 0) {\n                    for(var i1 = 0; i1 < remainingWords.length; i1++){\n                        NOT_ADDED.push(remainingWords[i1].ANSWER);\n                    }\n                }\n            }\n        }\n        for(var i2 = 0; i2 < START_SQUARES1.length; i2++){}\n    };\n    var checkForCollisions = // Locates all of the possible places a word could go on the board and returns an array of those locations\n    function checkForCollisions(wordToAdd, currentBoard) {\n        var collisions = [];\n        for(var i = 0; i < DIMENSIONS; i++){\n            for(var j = 0; j < DIMENSIONS; j++){\n                if (wordToAdd.includes(currentBoard[i].CURRENT_ROW[j].KEY_CHARACTER)) {\n                    collisions.push({\n                        row: i,\n                        col: j,\n                        character: currentBoard[i].CURRENT_ROW[j].KEY_CHARACTER\n                    });\n                }\n            }\n        }\n        return collisions;\n    };\n    var checkAndInsertWord = // Checks that a word can be inserted in a certain spot on the board and if it is possible to insert it, it inserts it\n    function checkAndInsertWord(wordToAdd, board, remainingWords, addedWords, START_SQUARES2, aNum) {\n        var wordInserted = false;\n        var foundCollisions = checkForCollisions(wordToAdd, board);\n        for(var i = 0; i < foundCollisions.length; i++){\n            var insertCheck = checkIfWordCanBeInserted(wordToAdd, foundCollisions[i], board);\n            if (insertCheck.INSERT == true) {\n                board = insertWord(wordToAdd, board, foundCollisions[i], insertCheck.DIRECTION, START_SQUARES2, aNum);\n                addedWords.push(wordToAdd);\n                var wordIndex = remainingWords.findIndex(function(object) {\n                    return object.ANSWER === wordToAdd;\n                });\n                remainingWords.splice(wordIndex, 1);\n                ascendencyNums.push({\n                    ASCENDENCY_NUMBER: aNum,\n                    NAME: wordToAdd\n                });\n                wordInserted = true;\n                break;\n            }\n        }\n        return wordInserted;\n    };\n    var checkIfWordCanBeInserted = // Given a location that the word could potentially be inserted, it checks if it will collide with other words and accepts or rejects based on the current board state\n    function checkIfWordCanBeInserted(wordToAdd, collision, currentBoard) {\n        var canInsert = false;\n        var direction = \"horizontal\";\n        var charIndex = wordToAdd.indexOf(collision.character);\n        var splitWord = wordToAdd.split(collision.character);\n        var firstPart = \"\";\n        var secondPart = \"\";\n        if (splitWord.length == 2) {\n            firstPart = splitWord[0].split(\"\").reverse();\n            secondPart = splitWord[1].split(\"\");\n        } else if (splitWord.length > 2) {\n            firstPart = splitWord[0].split(\"\").reverse();\n            secondPart = splitWord[1];\n            for(var i = 2; i < splitWord.length; i++){\n                secondPart += collision.character;\n                secondPart += splitWord[i];\n            }\n        } else {\n            if (charIndex == 0) {\n                secondPart = splitWord[0].split(\"\");\n            } else if (charIndex = wordToAdd.length - 1) {\n                firstPart = splitWord[0].split(\"\");\n            }\n        }\n        //Check to see if it can be inserted horizontally\n        if (currentBoard[collision.row].CURRENT_ROW[collision.col + 1].KEY_CHARACTER === \"*\" && currentBoard[collision.row].CURRENT_ROW[collision.col - 1].KEY_CHARACTER === \"*\" && currentBoard[collision.row + 1].CURRENT_ROW[collision.col + 1].KEY_CHARACTER === \"*\" && currentBoard[collision.row - 1].CURRENT_ROW[collision.col + 1].KEY_CHARACTER === \"*\" && currentBoard[collision.row + 1].CURRENT_ROW[collision.col - 1].KEY_CHARACTER === \"*\" && currentBoard[collision.row - 1].CURRENT_ROW[collision.col - 1].KEY_CHARACTER === \"*\") {\n            for(var i3 = 1; i3 <= firstPart.length; i3++){\n                if ((currentBoard[collision.row].CURRENT_ROW[collision.col - i3].KEY_CHARACTER === \"*\" || currentBoard[collision.row].CURRENT_ROW[collision.col - i3].KEY_CHARACTER === firstPart[i3 - 1]) && currentBoard[collision.row].CURRENT_ROW[collision.col - i3].AVAILABLE == true && currentBoard[collision.row + 1].CURRENT_ROW[collision.col - i3].KEY_CHARACTER == \"*\" && currentBoard[collision.row - 1].CURRENT_ROW[collision.col - i3].KEY_CHARACTER == \"*\" && currentBoard[collision.row].CURRENT_ROW[collision.col - i3 - 1].AVAILABLE == true) {\n                    canInsert = true;\n                } else {\n                    canInsert = false;\n                    return {\n                        INSERT: canInsert,\n                        DIRECTION: direction\n                    };\n                }\n            }\n            for(var i4 = 1; i4 <= secondPart.length; i4++){\n                if ((currentBoard[collision.row].CURRENT_ROW[collision.col + i4].KEY_CHARACTER === \"*\" || currentBoard[collision.row].CURRENT_ROW[collision.col + i4].KEY_CHARACTER === secondPart[i4 - 1]) && currentBoard[collision.row].CURRENT_ROW[collision.col + i4].AVAILABLE == true && currentBoard[collision.row + 1].CURRENT_ROW[collision.col + i4].KEY_CHARACTER == \"*\" && currentBoard[collision.row - 1].CURRENT_ROW[collision.col + i4].KEY_CHARACTER == \"*\" && currentBoard[collision.row].CURRENT_ROW[collision.col + i4 + 1].AVAILABLE == true) {\n                    canInsert = true;\n                } else {\n                    canInsert = false;\n                    return {\n                        INSERT: canInsert,\n                        DIRECTION: direction\n                    };\n                }\n            }\n        }\n        if (currentBoard[collision.row + 1].CURRENT_ROW[collision.col].KEY_CHARACTER === \"*\" && currentBoard[collision.row - 1].CURRENT_ROW[collision.col].KEY_CHARACTER === \"*\" && currentBoard[collision.row + 1].CURRENT_ROW[collision.col + 1].KEY_CHARACTER === \"*\" && currentBoard[collision.row - 1].CURRENT_ROW[collision.col + 1].KEY_CHARACTER === \"*\" && currentBoard[collision.row + 1].CURRENT_ROW[collision.col - 1].KEY_CHARACTER === \"*\" && currentBoard[collision.row - 1].CURRENT_ROW[collision.col - 1].KEY_CHARACTER === \"*\") {\n            direction = \"vertical\";\n            for(var i5 = 1; i5 <= firstPart.length; i5++){\n                if ((currentBoard[collision.row - i5].CURRENT_ROW[collision.col].KEY_CHARACTER === \"*\" || currentBoard[collision.row - i5].CURRENT_ROW[collision.col].KEY_CHARACTER === firstPart[i5 - 1]) && currentBoard[collision.row - i5].CURRENT_ROW[collision.col].AVAILABLE == true && currentBoard[collision.row - i5].CURRENT_ROW[collision.col + 1].KEY_CHARACTER == \"*\" && currentBoard[collision.row - i5].CURRENT_ROW[collision.col - 1].KEY_CHARACTER == \"*\" && currentBoard[collision.row - i5 - 1].CURRENT_ROW[collision.col].AVAILABLE == true) {\n                    canInsert = true;\n                } else {\n                    canInsert = false;\n                    return {\n                        INSERT: canInsert,\n                        DIRECTION: direction\n                    };\n                }\n            }\n            for(var i6 = 1; i6 <= secondPart.length; i6++){\n                if ((currentBoard[collision.row + i6].CURRENT_ROW[collision.col].KEY_CHARACTER === \"*\" || currentBoard[collision.row + i6].CURRENT_ROW[collision.col].KEY_CHARACTER === secondPart[i6 - 1]) && currentBoard[collision.row + i6].CURRENT_ROW[collision.col].AVAILABLE == true && currentBoard[collision.row + i6].CURRENT_ROW[collision.col + 1].KEY_CHARACTER == \"*\" && currentBoard[collision.row + i6].CURRENT_ROW[collision.col - 1].KEY_CHARACTER == \"*\" && currentBoard[collision.row + i6 + 1].CURRENT_ROW[collision.col].AVAILABLE == true) {\n                    canInsert = true;\n                } else {\n                    canInsert = false;\n                    return {\n                        INSERT: canInsert,\n                        DIRECTION: direction\n                    };\n                }\n            }\n        }\n        return {\n            INSERT: canInsert,\n            DIRECTION: direction\n        };\n    };\n    var insertWord = // Inserts an individual word. It splits the word apart based on where it is going to go on the board, and updates the key characters of the new squares to the word's characters. It also updates the availability of the squares surrounding the newly placed word\n    function insertWord(wordToAdd, currentBoard, collision, direction, START_SQUARES3, aNum) {\n        var charIndex = wordToAdd.indexOf(collision.character);\n        var splitWord = wordToAdd.split(collision.character);\n        var firstPart = \"\";\n        var secondPart = \"\";\n        if (splitWord.length == 2) {\n            firstPart = splitWord[0].split(\"\").reverse();\n            secondPart = splitWord[1].split(\"\");\n        } else if (splitWord.length > 2) {\n            firstPart = splitWord[0].split(\"\").reverse();\n            secondPart = splitWord[1];\n            for(var i = 2; i < splitWord.length; i++){\n                secondPart += collision.character;\n                secondPart += splitWord[i];\n            }\n        } else {\n            if (charIndex == 0) {\n                secondPart = splitWord[0].split(\"\");\n            } else if (charIndex = wordToAdd.length - 1) {\n                firstPart = splitWord[0].split(\"\");\n            }\n        }\n        if (direction == \"horizontal\") {\n            var firstRow = 0;\n            var firstCol = 0;\n            if (firstPart.length == 0) {\n                firstRow = collision.row;\n                firstCol = collision.col;\n                START_SQUARES3.push({\n                    ROW: firstRow,\n                    COL: firstCol\n                });\n            }\n            for(var i7 = 1; i7 <= firstPart.length; i7++){\n                currentBoard[collision.row].CURRENT_ROW[collision.col - i7].KEY_CHARACTER = firstPart[i7 - 1];\n                currentBoard[collision.row].CURRENT_ROW[collision.col - i7].AVAILABLE = false;\n                if (i7 == firstPart.length) {\n                    firstRow = collision.row;\n                    firstCol = collision.col - i7;\n                    START_SQUARES3.push({\n                        ROW: firstRow,\n                        COL: firstCol\n                    });\n                }\n            }\n            currentBoard[collision.row].CURRENT_ROW[collision.col - firstPart.length - 1].AVAILABLE = false;\n            for(var i8 = 0; i8 <= secondPart.length; i8++){\n                currentBoard[collision.row].CURRENT_ROW[collision.col + i8].KEY_CHARACTER = secondPart[i8 - 1];\n                currentBoard[collision.row].CURRENT_ROW[collision.col + i8].AVAILABLE = false;\n            }\n            currentBoard[collision.row].CURRENT_ROW[collision.col + secondPart.length + 1].AVAILABLE = false;\n            HORIZONTAL_WORDS.push({\n                WORD: wordToAdd,\n                CLUE_NUMBER: START_SQUARES3.indexOf(START_SQUARES3.filter(function(e) {\n                    return e.ROW == collision.row && e.COL == collision.col - firstPart.length;\n                })[0]) + 1\n            });\n        }\n        if (direction == \"vertical\") {\n            var firstRow1 = 0;\n            var firstCol1 = 0;\n            if (firstPart.length == 0) {\n                firstRow1 = collision.row;\n                firstCol1 = collision.col;\n                START_SQUARES3.push({\n                    ROW: firstRow1,\n                    COL: firstCol1\n                });\n            }\n            for(var i9 = 1; i9 <= firstPart.length; i9++){\n                currentBoard[collision.row - i9].CURRENT_ROW[collision.col].KEY_CHARACTER = firstPart[i9 - 1];\n                currentBoard[collision.row - i9].CURRENT_ROW[collision.col].AVAILABLE = false;\n                if (i9 == firstPart.length) {\n                    firstRow1 = collision.row - i9;\n                    firstCol1 = collision.col;\n                    START_SQUARES3.push({\n                        ROW: firstRow1,\n                        COL: firstCol1\n                    });\n                }\n            }\n            currentBoard[collision.row - firstPart.length - 1].CURRENT_ROW[collision.col].AVAILABLE = false;\n            for(var i10 = 0; i10 <= secondPart.length; i10++){\n                currentBoard[collision.row + i10].CURRENT_ROW[collision.col].KEY_CHARACTER = secondPart[i10 - 1];\n                currentBoard[collision.row + i10].CURRENT_ROW[collision.col].AVAILABLE = false;\n            }\n            currentBoard[collision.row + secondPart.length + 1].CURRENT_ROW[collision.col].AVAILABLE = false;\n            VERTICAL_WORDS.push({\n                WORD: wordToAdd,\n                CLUE_NUMBER: START_SQUARES3.indexOf(START_SQUARES3.filter(function(e) {\n                    return e.ROW == collision.row - firstPart.length && e.COL == collision.col;\n                })[0]) + 1\n            });\n            setVertClues(VERTICAL_WORDS);\n        }\n        currentBoard[collision.row].CURRENT_ROW[collision.col].KEY_CHARACTER = collision.character;\n        return currentBoard;\n    };\n    var sortKeyWords = // Sorts the key words from longest word to shortest word\n    function sortKeyWords(ANCESTORS) {\n        var keyWordList = getAnswersFromClues(ANCESTORS);\n        keyWordList.sort(function(a, b) {\n            return b.ANSWER.length - a.ANSWER.length;\n        });\n        return keyWordList;\n    };\n    var getAnswersFromClues = // Allows us to get all words put into the puzzle\n    function getAnswersFromClues(CLUE_LIST) {\n        var ANSWERS = [];\n        for(var i = 0; i < CLUE_LIST.length; i++){\n            ANSWERS.push({\n                ANSWER: CLUE_LIST[i].ANSWER,\n                ASCENDENCY_NUM: CLUE_LIST[i].ASCENDENCY_NUM\n            });\n        }\n        return ANSWERS;\n    };\n    var shuffle = // Puts the remaining words in a random order to generate a new crossword puzzle every time\n    function shuffle(array) {\n        var currentIndex = array.length, randomIndex;\n        while(currentIndex != 0){\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex--;\n            var ref;\n            ref = [\n                array[randomIndex],\n                array[currentIndex], \n            ], array[currentIndex] = ref[0], array[randomIndex] = ref[1], ref;\n        }\n        return array;\n    };\n    var setUpBoard = // Sets up the board before the user can see it\n    function setUpBoard(BOARD, SORTED_CLUE_LIST, START_SQUARES4, ADDED_WORDS, REMAINING_WORDS, NOT_ADDED) {\n        for(var currentRow = 0; currentRow < DIMENSIONS; currentRow++){\n            var CURRENT_ROW = [];\n            for(var currentCol = 0; currentCol < DIMENSIONS; currentCol++){\n                CURRENT_ROW.push({\n                    ROW: currentRow,\n                    COL: currentCol,\n                    KEY_CHARACTER: currentRow == 0 || currentRow == DIMENSIONS - 1 || currentCol == 0 || currentCol == DIMENSIONS - 1 ? \"&\" : \"*\",\n                    CHARACTER: currentRow == 0 || currentRow == DIMENSIONS - 1 || currentCol == 0 || currentCol == DIMENSIONS - 1 ? \"&\" : \"*\",\n                    id: currentRow + \"x\" + currentCol,\n                    AVAILABLE: currentRow == 0 || currentRow == DIMENSIONS - 1 || currentCol == 0 || currentCol == DIMENSIONS - 1 ? false : true\n                });\n            }\n            BOARD.push({\n                CURRENT_ROW: CURRENT_ROW,\n                id: currentRow\n            });\n        }\n        var randomAncestor = SORTED_CLUE_LIST[Math.floor(Math.random() * SORTED_CLUE_LIST.length)];\n        BOARD = insertFirstWord(9, 4, //randomAncestor.ANSWER,\n        SORTED_CLUE_LIST[0].ANSWER, BOARD, START_SQUARES4, ADDED_WORDS, REMAINING_WORDS, SORTED_CLUE_LIST[0].ASCENDENCY_NUM);\n        shuffle(REMAINING_WORDS);\n        insertAllWords(BOARD, REMAINING_WORDS, ADDED_WORDS, START_SQUARES4, NOT_ADDED);\n        for(var i = 0; i < ascendencyNums.length; i++){\n            justAscendencyNums[i] = ascendencyNums[i].ASCENDENCY_NUMBER;\n        }\n        return BOARD;\n    };\n    var insertFirstWord = // Inserts the first word at a set position in the board\n    function insertFirstWord(rowIndex, colIndex, word, currentBoard, START_SQUARES5, ADDED_WORDS, REMAINING_WORDS, aNum) {\n        var canInsertWord = false;\n        var wordIndex = 0;\n        if (word.length < DIMENSIONS - 5) {\n            canInsertWord = true;\n        } else {\n            for(var i = 1; i < REMAINING_WORDS.length; i++){\n                if (REMAINING_WORDS[i].ANSWER.length < DIMENSIONS - 6) {\n                    canInsertWord = true;\n                    word = REMAINING_WORDS[i].ANSWER;\n                    wordIndex = i;\n                }\n            }\n        }\n        if (canInsertWord) {\n            var splitWord = word.split(\"\");\n            for(var i11 = 0; i11 < splitWord.length; i11++){\n                currentBoard[rowIndex].CURRENT_ROW[colIndex + i11].KEY_CHARACTER = splitWord[i11];\n                currentBoard[rowIndex].CURRENT_ROW[colIndex + i11].AVAILABLE = false;\n            }\n            START_SQUARES5.push({\n                ROW: rowIndex,\n                COL: colIndex\n            });\n            ADDED_WORDS.push(word);\n            HORIZONTAL_WORDS.push({\n                WORD: word,\n                CLUE_NUMBER: START_SQUARES5.indexOf(START_SQUARES5.filter(function(e) {\n                    return e.ROW == rowIndex && e.COL == colIndex;\n                })[0]) + 1\n            });\n            setHorClues(HORIZONTAL_WORDS);\n            REMAINING_WORDS.splice(wordIndex, 1);\n            ascendencyNums.push({\n                ASCENDENCY_NUMBER: aNum,\n                NAME: word\n            });\n        }\n        return currentBoard;\n    };\n    var checkIfFinished = // Loops through the 2D array to check if each key character matches each entered character\n    function checkIfFinished() {\n        for(var i = 0; i < board1.length; i++){\n            for(var j = 0; j < board1[i].CURRENT_ROW.length; j++){\n                if (board1[i].CURRENT_ROW[j].CHARACTER.toLowerCase() != board1[i].CURRENT_ROW[j].KEY_CHARACTER.toLowerCase()) {\n                    finished1 = false;\n                    return finished1;\n                }\n            }\n        }\n        finished1 = true;\n        return finished1;\n    };\n    var pageUpdated = function pageUpdated() {\n        var _this = this;\n        var clueNumber = -1;\n        return !loading ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(\"div\", {\n                    class: (_styles_crossword_module_css__WEBPACK_IMPORTED_MODULE_7___default().set_margins),\n                    children: [\n                        board1.map(function(rows) {\n                            var _this1 = _this;\n                            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(\"div\", {\n                                className: (_styles_crossword_module_css__WEBPACK_IMPORTED_MODULE_7___default().div),\n                                children: rows.CURRENT_ROW.map(function(rowItems) {\n                                    {\n                                        clueNumber = START_SQUARES.indexOf(START_SQUARES.filter(function(e) {\n                                            return e.ROW == rowItems.ROW && e.COL == rowItems.COL;\n                                        })[0]) + 1;\n                                    }\n                                    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(_square__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                                        row: rowItems.ROW,\n                                        col: rowItems.COL,\n                                        character: rowItems.CHARACTER,\n                                        key_character: rowItems.KEY_CHARACTER,\n                                        clueNumber: clueNumber,\n                                        handleSquareInput: handleSquareInput,\n                                        handleKeyDown: handleKeyDown,\n                                        dimensions: DIMENSIONS,\n                                        inputLocation: inputLocation1,\n                                        clueToFocus: clueToFocus\n                                    }, rowItems.id, false, {\n                                        fileName: \"C:\\\\Users\\\\cjrja\\\\IS-562_Project-Management\\\\familycrossword-2-11\\\\FamilyCrossword\\\\familytech-games\\\\src\\\\components\\\\crossword\\\\board.js\",\n                                        lineNumber: 714,\n                                        columnNumber: 21\n                                    }, _this1);\n                                })\n                            }, rows.id, false, {\n                                fileName: \"C:\\\\Users\\\\cjrja\\\\IS-562_Project-Management\\\\familycrossword-2-11\\\\FamilyCrossword\\\\familytech-games\\\\src\\\\components\\\\crossword\\\\board.js\",\n                                lineNumber: 703,\n                                columnNumber: 15\n                            }, _this);\n                        }),\n                        START_SQUARES = []\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\cjrja\\\\IS-562_Project-Management\\\\familycrossword-2-11\\\\FamilyCrossword\\\\familytech-games\\\\src\\\\components\\\\crossword\\\\board.js\",\n                    lineNumber: 700,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(_clue_list__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                    verticalClues: vertClues,\n                    horizontalClues: horClues,\n                    result: clues,\n                    childToParent: childToParent\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\cjrja\\\\IS-562_Project-Management\\\\familycrossword-2-11\\\\FamilyCrossword\\\\familytech-games\\\\src\\\\components\\\\crossword\\\\board.js\",\n                    lineNumber: 734,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_8__.Modal, {\n                    open: puzzleIsCorrect,\n                    onClose: function() {\n                        return setPuzzleIsCorrect(false);\n                    },\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(\"div\", {\n                        className: (_styles_crossword_module_css__WEBPACK_IMPORTED_MODULE_7___default().modal_container),\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(\"button\", {\n                                className: (_styles_crossword_module_css__WEBPACK_IMPORTED_MODULE_7___default().close_btn),\n                                onClick: function() {\n                                    return setPuzzleIsCorrect(false);\n                                },\n                                children: \"X\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\cjrja\\\\IS-562_Project-Management\\\\familycrossword-2-11\\\\FamilyCrossword\\\\familytech-games\\\\src\\\\components\\\\crossword\\\\board.js\",\n                                lineNumber: 742,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(\"h3\", {\n                                children: \"Congrats on solving the Crossword! \"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\cjrja\\\\IS-562_Project-Management\\\\familycrossword-2-11\\\\FamilyCrossword\\\\familytech-games\\\\src\\\\components\\\\crossword\\\\board.js\",\n                                lineNumber: 748,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\cjrja\\\\IS-562_Project-Management\\\\familycrossword-2-11\\\\FamilyCrossword\\\\familytech-games\\\\src\\\\components\\\\crossword\\\\board.js\",\n                        lineNumber: 741,\n                        columnNumber: 11\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\cjrja\\\\IS-562_Project-Management\\\\familycrossword-2-11\\\\FamilyCrossword\\\\familytech-games\\\\src\\\\components\\\\crossword\\\\board.js\",\n                    lineNumber: 740,\n                    columnNumber: 9\n                }, this)\n            ]\n        }, void 0, true) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(\"div\", {\n            children: \"Loading...\"\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\cjrja\\\\IS-562_Project-Management\\\\familycrossword-2-11\\\\FamilyCrossword\\\\familytech-games\\\\src\\\\components\\\\crossword\\\\board.js\",\n            lineNumber: 752,\n            columnNumber: 9\n        }, this);\n    };\n    _s();\n    var BOARD1 = [];\n    var finished1 = false;\n    var ADDED_WORDS1 = [];\n    var NOT_ADDED1 = [];\n    var VERTICAL_WORDS = [];\n    var HORIZONTAL_WORDS = [];\n    var justAscendencyNums = [];\n    var DIMENSIONS = 32;\n    var userFSData1 = (0,_contexts_UserContext__WEBPACK_IMPORTED_MODULE_5__.useUser)().userFSData;\n    var ANCESTORS1 = [];\n    var ascendencyNums = [];\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        //Creates an array of all names that could be added to the crossword\n        for(var _iterator = userFSData1[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var _value = _slicedToArray(_step.value, 2), key = _value[0], value = _value[1];\n            var currentAncestorName = value.name.compressedName;\n            ANCESTORS1.push({\n                CLUE: currentAncestorName,\n                ANSWER: currentAncestorName,\n                ASCENDENCY_NUM: key\n            });\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    var SORTED_CLUE_LIST1 = sortKeyWords(ANCESTORS1);\n    var REMAINING_WORDS1 = SORTED_CLUE_LIST1;\n    var ref7 = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)([]), clues = ref7[0], setClues = ref7[1];\n    var ref1 = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)([]), board1 = ref1[0], setBoard = ref1[1];\n    var ref2 = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)([]), vertClues = ref2[0], setVertClues = ref2[1];\n    var ref3 = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)([]), horClues = ref3[0], setHorClues = ref3[1];\n    var ref4 = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(true), loading = ref4[0], setLoading = ref4[1];\n    var ref5 = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(0), clueToFocus = ref5[0], setData = ref5[1];\n    var ref6 = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false), puzzleIsCorrect = ref6[0], setPuzzleIsCorrect = ref6[1];\n    var inputLocation1 = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(new Array());\n    //Tells the page if it should be loading to make sure the clues are all set up before it is shown to the user\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(function() {\n        if (clues.length > 0) {\n            setLoading(false);\n        }\n    }, [\n        clues\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(function() {\n        setBoard(setUpBoard(BOARD1, SORTED_CLUE_LIST1, START_SQUARES, ADDED_WORDS1, REMAINING_WORDS1, NOT_ADDED1));\n    }, []);\n    // Handles what happens when the user solves the crossword\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(function() {\n        setPuzzleIsCorrect(puzzleIsCorrect);\n    }, [\n        puzzleIsCorrect\n    ]);\n    function fetchData(userFSData, ascendancyNums) {\n        return _fetchData.apply(this, arguments);\n    }\n    function _fetchData() {\n        _fetchData = // Gets the clue data for each word that is put into the crossword and sets it to the clues variable\n        _asyncToGenerator(C_Users_cjrja_IS_562_Project_Management_familycrossword_2_11_FamilyCrossword_familytech_games_src_node_modules_next_dist_compiled_regenerator_runtime_runtime_js__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee(userFSData, ascendancyNums) {\n            var url, res;\n            return C_Users_cjrja_IS_562_Project_Management_familycrossword_2_11_FamilyCrossword_familytech_games_src_node_modules_next_dist_compiled_regenerator_runtime_runtime_js__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee$(_ctx) {\n                while(1)switch(_ctx.prev = _ctx.next){\n                    case 0:\n                        url = \"http://localhost:3000/api/questiongenerator\";\n                        _ctx.prev = 1;\n                        _ctx.next = 4;\n                        return axios__WEBPACK_IMPORTED_MODULE_6___default().post(url, {\n                            userFSData: userFSData,\n                            ascendancyNums: ascendancyNums\n                        });\n                    case 4:\n                        res = _ctx.sent;\n                        setClues(res.data);\n                        _ctx.next = 11;\n                        break;\n                    case 8:\n                        _ctx.prev = 8;\n                        _ctx.t0 = _ctx[\"catch\"](1);\n                        console.log(_ctx.t0);\n                    case 11:\n                    case \"end\":\n                        return _ctx.stop();\n                }\n            }, _callee, null, [\n                [\n                    1,\n                    8\n                ]\n            ]);\n        }));\n        return _fetchData.apply(this, arguments);\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(function() {\n        if (userFSData1) {\n            console.log(\"data in if statement \" + Array.from(userFSData1.values()).length);\n            var fsDataObj = Object.fromEntries(userFSData1);\n            fetchData(fsDataObj, justAscendencyNums);\n        }\n    }, []);\n    var childToParent = function(childData) {\n        setData(childData);\n        pageUpdated();\n    };\n}\n_s(Board, \"APmBA88ggoHx1vDtDo94yGApOfg=\", false, function() {\n    return [\n        _contexts_UserContext__WEBPACK_IMPORTED_MODULE_5__.useUser\n    ];\n});\n_c = Board;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Board);\nvar _c;\n$RefreshReg$(_c, \"Board\");\n\n\n;\r\n    // Wrapped in an IIFE to avoid polluting the global scope\r\n    ;\r\n    (function () {\r\n        var _a, _b;\r\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\r\n        // to extract CSS. For backwards compatibility, we need to check we're in a\r\n        // browser context before continuing.\r\n        if (typeof self !== 'undefined' &&\r\n            // AMP / No-JS mode does not inject these helpers:\r\n            '$RefreshHelpers$' in self) {\r\n            // @ts-ignore __webpack_module__ is global\r\n            var currentExports = module.exports;\r\n            // @ts-ignore __webpack_module__ is global\r\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\r\n            // This cannot happen in MainTemplate because the exports mismatch between\r\n            // templating and execution.\r\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\r\n            // A module can be accepted automatically based on its exports, e.g. when\r\n            // it is a Refresh Boundary.\r\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\r\n                // Save the previous exports on update so we can compare the boundary\r\n                // signatures.\r\n                module.hot.dispose(function (data) {\r\n                    data.prevExports = currentExports;\r\n                });\r\n                // Unconditionally accept an update to this module, we'll check if it's\r\n                // still a Refresh Boundary later.\r\n                // @ts-ignore importMeta is replaced in the loader\r\n                module.hot.accept();\r\n                // This field is set when the previous version of this module was a\r\n                // Refresh Boundary, letting us know we need to check for invalidation or\r\n                // enqueue an update.\r\n                if (prevExports !== null) {\r\n                    // A boundary can become ineligible if its exports are incompatible\r\n                    // with the previous exports.\r\n                    //\r\n                    // For example, if you add/remove/change exports, we'll want to\r\n                    // re-execute the importing modules, and force those components to\r\n                    // re-render. Similarly, if you convert a class component to a\r\n                    // function, we want to invalidate the boundary.\r\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\r\n                        module.hot.invalidate();\r\n                    }\r\n                    else {\r\n                        self.$RefreshHelpers$.scheduleUpdate();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Since we just executed the code for the module, it's possible that the\r\n                // new exports made it ineligible for being a boundary.\r\n                // We only care about the case when we were _previously_ a boundary,\r\n                // because we already accepted this update (accidental side effect).\r\n                var isNoLongerABoundary = prevExports !== null;\r\n                if (isNoLongerABoundary) {\r\n                    module.hot.invalidate();\r\n                }\r\n            }\r\n        }\r\n    })();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/crossword/board.js\n");

/***/ })

});